# 工作进程数设置为自动，Nginx 会根据 CPU 核心数自动调整工作进程数
worker_processes auto;

events {
    # 每个工作进程的最大连接数，这里设置为10240，适合高并发场景
    worker_connections 10240;
}

http {
    # 包含 MIME 类型映射文件，默认类型为 application/octet-stream
    include mime.types;
    default_type application/octet-stream;

    # 性能优化相关配置
    # 启用 sendfile() 函数以提高文件传输性能
    sendfile on;
    # 确保数据包在发送前填满整个 TCP 数据包
    tcp_nopush on;
    # 禁用 Nagle 算法，减少延迟
    tcp_nodelay on;
    # 设置长连接超时时间为65秒
    keepalive_timeout 65;

    # 开启 gzip 压缩以减少传输的数据量
    gzip on; 
    # 设置允许压缩的页面最小字节数，这里设置为10KB
    gzip_min_length 10k;  
    # 设置系统获取多少缓冲区以及每个缓冲区的大小，这里是16个64KB的缓冲区
    gzip_buffers 16 64k;  
    # 设置 gzip 压缩级别，范围是1到9，9是最高压缩率但占用CPU较多
    gzip_comp_level 6;  
    # 指定需要压缩的 MIME 类型
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml; 
    # 根据请求的 Accept-Encoding 头信息来判断是否启用 gzip
    gzip_vary on;
    # 启用静态 gzip 文件支持
    gzip_static on;
    # 增加请求头缓冲区大小
    client_header_buffer_size 64k;
    # 增加大请求头缓冲区的数量和大小
    large_client_header_buffers 4 64k;
    # 设置客户端请求体最大大小为512MB
    client_max_body_size 512m;

    # SSL 优化相关配置
    # 共享的 SSL 会话缓存，大小为30MB
    ssl_session_cache shared:SSL:30m;
    # 设置 SSL 会话超时时间为10分钟
    ssl_session_timeout 10m;
    # 关闭 SSL 会话票据，增强安全性
    ssl_session_tickets off;
    # 只使用 TLSv1.2 和 TLSv1.3 协议
    ssl_protocols TLSv1.2 TLSv1.3;
    # 设置使用的加密套件
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    # 强制优先使用服务器端的加密套件
    ssl_prefer_server_ciphers on;
    # 启用 OCSP Stapling
    ssl_stapling on;
    # 启用 OCSP Stapling 验证
    ssl_stapling_verify on;
    # 设置 DNS 解析器并指定有效时间
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    # 设置 DNS 解析超时时间为5秒
    resolver_timeout 5s;

    # 隐藏 Nginx 版本号，增加安全性
    server_tokens off;

    # 定义缓存区域
    proxy_cache_path /usr/share/html levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;


    # HTTP 到 HTTPS 的重定向配置
    server {
        # 监听 ipv4 ipv6 HTTP 请求
        listen 80;  
        listen [::]:80;
        # 设置服务器名称
        server_name yshujia.cn www.yshujia.cn utopia.yshujia.cn www.utopia.yshujia.cn static.yshujia.cn www.static.yshujia.cn;
        # 将所有 HTTP 请求重定向到 HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS 服务器配置
    server {
        # 监听 ipv4 ipv6 HTTPS 请求
        listen 443 ssl;
        listen [::]:443 ssl;
        # 启用 HTTP/2 协议
        http2 on;
        # 设置服务器名称
        server_name yshujia.cn www.yshujia.cn utopia.yshujia.cn www.utopia.yshujia.cn;
        # 设置 SSL 证书路径
        ssl_certificate /usr/share/nginx/https/yshujia.pem;
        # 设置 SSL 私钥路径
        ssl_certificate_key /usr/share/nginx/https/yshujia.key;

        # 启用 HSTS（HTTP Strict Transport Security）
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
        # 转发原始请求头
        proxy_set_header Host $host;
        # 设置转发的真实主机名
        proxy_set_header X-Forwarded-Host $host;
        # 设置转发的真实协议（HTTP 或 HTTPS）
        proxy_set_header X-Forwarded-Proto $scheme;
        # 设置转发的真实 IP 地址
        proxy_set_header X-Real-IP $remote_addr;
        # 设置转发的真实 IP 地址链
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 设置代理请求的 HTTP 版本为 1.1
        proxy_http_version 1.1;
        # 升级为长连接
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        location / {
            # 使用定义的缓存区域
            proxy_cache my_cache;
            # 设置静态文件根目录
            root /usr/share/nginx/html/dist;
            # 设置默认首页文件
            index index.html index.htm;
            # 设置缓存有效时间为60分钟（对于状态码200和302）
            proxy_cache_valid 200 302 60m;
            # 设置缓存有效时间为5分钟（对于状态码404）
            proxy_cache_valid 404 5m;
            # 尝试查找请求的文件或目录，找不到则返回 index.html
            try_files $uri $uri/ /index.html;
        }

        location /api {
            # 将 /api 路径重写为实际路径
            rewrite ^/api(.*)$ $1 break;
            # 将请求转发到后端服务
            proxy_pass http://yshujia.cn:9898;
        }

        location /socket/socket.io {
            # 将请求转发到后端服务
            proxy_pass http://服务器IP地址:9092;
            rewrite "^/socket/(.*)$" /$1 break;
            # 关闭缓冲区，避免WebSocket消息延迟
            proxy_request_buffering off;
        }

        # 设置错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            # 设置错误页面的根目录
            root html;
        }
    }

    # minio HTTPS 服务器配置
    server {
        # 监听 ipv4 ipv6 HTTPS 请求
        listen 443 ssl;
        listen 9001 ssl;
        listen 9000 ssl;
        listen [::]:443 ssl;

        # 设置服务器名称
        server_name static.yshujia.cn www.static.yshujia.cn;
        # 设置 SSL 证书路径
        ssl_certificate /usr/share/nginx/https/yshujia.pem;
        # 设置 SSL 私钥路径
        ssl_certificate_key /usr/share/nginx/https/yshujia.key;

        # 设置客户端请求体最大大小为50MB
        client_max_body_size 50m;

        location / {
            # 使用定义的缓存区域
            proxy_cache my_cache;
            # 设置缓存有效时间为60分钟（对于状态码200和302）
            proxy_cache_valid 200 302 60m;
            # 设置缓存有效时间为5分钟（对于状态码404）
            proxy_cache_valid 404 5m;
        }

        location /static {
            # 记录访问日志
            access_log /var/log/nginx/referer.log;
            # 验证合法的 Referer 如果 Referer 不合法，返回403 Forbidden
            valid_referers blocked server_names *.yshujia.cn yshujia.cn;
            if ($invalid_referer) {
                return 301 https://yshujia.cn;
            }
            # 将请求转发到 MinIO 服务 这里必须为 https
            proxy_pass https://static.yshujia.cn:9000;
        }
    }
}